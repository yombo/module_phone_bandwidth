"""
For details about this module visit:
https://yombo.net/modules/modules-phone-bandwidth

Learn about at: https://yombo.net/
Get started today: https://yg2.in/start

.. moduleauthor:: Mitch Schwenk <mitch-gw@yombo.net>

:copyright: 2018 Yombo
:license: YRPL 1.6
"""
from bandwidth import messaging, voice, account

from twisted.internet import reactor
from twisted.internet.defer import inlineCallbacks

from yombo.core.log import get_logger
from yombo.core.module import YomboModule
from yombo.utils.maxdict import MaxDict

from yombo.modules.phone_bandwidth.web_routes import module_phone_bandwidth_routes


logger = get_logger('modules.twilio')

class Phone_Bandwidth(YomboModule):
    """
    Send SMS notifications (MMS coming soon)
    """
    def _init_(self, **kwargs):
        self.is_master = self._Configs.get('core', 'is_master', True, False)
        self.node = None
        if self.is_master is False:
            logger.warn("Phone Bandwidth module disabled, only works on the master gateway of a cluster.")
            self._Notifications.add({'title': 'Phone Bandwidth module disabled',
                                     'message': 'The Phone Bandwidth module can only be used on a master gateway node.',
                                     'source': 'Amazon Alexa Module',
                                     'persist': False,
                                     'priority': 'high',
                                     'always_show': True,
                                     'always_show_allow_clear': True,
                                     })
            return

        try:
            self._Phone = self._Modules['Phone']
        except Exception as e:
            logger.warn("Phone Bandwidth module disabled, required module 'Phone' is missing.")
            self._Notifications.add({'title': 'Phone Bandwidth module disabled',
                                     'message': 'The Phone Bandwidth module has disabled itself as it required the "Phone" to operate.',
                                     'source': 'Phone Bandwidth Module',
                                     'persist': False,
                                     'priority': 'high',
                                     'always_show': True,
                                     'always_show_allow_clear': True,
                                     })

    @inlineCallbacks
    def _load_(self, **kwargs):
        if self.is_master is False:
            return

        self.gwid = self._Gateways.get_local_id()

        yield self._reload_()

        nodes = self._Nodes.search({'node_type': 'module_phone_bandwidth'})
        if len(nodes) == 0:
            self.node = yield self._Nodes.create(label='Module Phone Bandwidth',
                                                 machine_label='module_phone_bandwidth',
                                                 node_type='module_phone_bandwidth',
                                                 data={'active_phones': {}},
                                                 data_content_type='json',
                                                 gateway_id=self.gwid,
                                                 destination='gw')
        elif len(nodes) > 1:
            logger.warn("Too many node instances. Taking the first one and dropping old ones.")

        for node_id, node in nodes.items():
            self.node = node
            break
        if 'active_phones' not in self.node.data:
            self.node.data['active_phones'] = {}

        # self.node.data['active_phones'] = {}

        try:
            self.apiauth = self._APIAuth.get('Bandwidth.com')
            self.apiauth.enable()
        except KeyError:
            self.apiauth = yield self._APIAuth.create(
                "Bandwidth.com",
                description="Automatically generated by the the Phone Bandwidth module.",
            )

    @inlineCallbacks
    def _reload_(self):
        variables = yield self._module_variables();
        user = variables['user']['values'][0]
        token = variables['token']['values'][0]
        secret = variables['secret']['values'][0]

        self.bandwidth_phone_number = variables['phone_number']['values'][0]
        self.messaging_api = messaging.Client(user, token, secret)
        self.voice_api = voice.Client(user, token, secret)

    def _webinterface_add_routes_(self, **kwargs):
        """
        Add web interface routes.

        :param kwargs:
        :return:
        """
        if self.is_master is True and self._States['loader.operating_mode'] == 'run':
            return {
                'nav_side': [
                    {
                        'label1': 'Module Settings',
                        'label2': 'Phone Bandwidth',
                        'priority1': 820,  # Even with a value, 'Tools' is already defined and will be ignored.
                        'priority2': 100,
                        'icon': 'fa fa-gear fa-fw',
                        'url': '/modules_settings/phone_bandwidth/index',
                        'tooltip': '',
                        'opmode': 'run',
                    },
                ],
                'routes': [
                    module_phone_bandwidth_routes,
                ],
                'configs': {
                    'settings_link': '/modules_settings/phone_bandwidth/index',
                },
            }

    def phone_bandwidth_phone_target(self, **kwargs):
        """
        Called by the phones module when a notification was sent with a target.

        :param kwargs:
        :return:
        """
        print("Bandwidth should send message to: %s" % kwargs['phone'].phone_number)
        phone = kwargs['phone']
        phone_id = phone.device_id
        if phone_id in self.node.data['active_phones']:
            if self.node.data['active_phones'][phone_id]['send'] == 1:
                message_id = self.messaging_api.send_message(
                    from_=self.bandwidth_phone_number,
                    to=kwargs['phone'].phone_number,
                    text=kwargs['message']
                    )
                logger.info("Sending SMS/MMS to ({id}): {phone}", id=message_id, phone=phone.phone_number)
